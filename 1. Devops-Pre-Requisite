**********************
**********************
LINUX BASICS
**********************
**********************

⏺ In CLI, various shells include
 Bourne shell (sh)
 C shell (csh or tcsh)
 Z shell (zsh)
 Bourne Again Shell (bash)

⏺ Old Bourne shell = limited
Modern bash shell = advances features such as arithmetic operations, conditionals and arrays.

⏺ To verify which shel you are using
> echo $SHELL

echo = prints text or value of an environment variable, as indicated by $(dollar) sign.

- Executing multiple commands in sequence by separating them with semicolons
> cd new_directory; mkdir www; pwd

⏺ Essential vi Operations :-
(some common operations in command mode)

Operations                   Command                       Description
Navigation                 Arrow keys or h, j, k, l        Move left, down, up and right respectively
Delete a character         x                               Delete the character under the cursor
Delete a line              dd                              Removes the entire line
Copy (yank) a line         yy                              copy the current line into the buffer
Paste copied content       p                               Paste the copied or deleted content
Scroll up                  ctrl + u                        scroll up within the document
scroll down                ctrl + d                        scroll down within the document
Command prompt             :                               Enter further commands (e.g. save, quit)

To manage file operations: 
Save your changes: Type ':w' (you can optionally append a file name)
Quit without saving: Type ':q'
Save and quit: Type ':wq'

Search for text :
To find a word or phrase, switch to command mode and type
> /off
All occurences of "off" will be hihglighted, press 'N' to jump to next match and continue pressing 'N' to cycle through additional matches.


To check current username 
> whoami
To retrieve detailed information about your user account - including user ID, group ID, and group memberships
> id
to switch to another user account
> su aparna


Downloading Files from the Internet :-
To download files such as RPM packages, binaries, or images from the internet. You can use 
'curl' command, which downloads content from a specified URL. The '-O' option saves the output 
directly to a file:
> curl http://www.some-site.com/some-file.txt -O
or
you can use 'wget' command by providing the complete URL of the file.


Package Management
...............................

Package Managers = simplify software installation by automating tasks that would otherwise by manually intensive.

⏺ RPM - Based Package Management
CentOS, Red Hat Enterprise Linux, and Fedora use an RPM-based system.
RPM(Red Hat Package Manager) distributes software in bundles with .rpm extension.

Installing a package: Use '-i' option along with package name to install software from a 
                      specified location.
Uninstalling a package: Use '-e' option to remove a package
Querying package details: Use '-q' option to retrieve information about an installed package.

RPM does no automatically resolve dependencies. Ex, if you install Ansible - which requires Python and additional libraries - using
RPM alone will not install missing dependencies.

> rpm -i telnet.rpm
> rpm -e telnet
> rpm -q telnet

⏺ Dependency Management with Yum
Yum = high level package managers
It integrates with RPM while automating dependency resolution.
> yum install ansible
(yum searches its configured repositories, locates the specified package and its dependencies, and 
installs them in the correct order).

⏺ Understanding Repositories
Yum retrieves packages from software repositories - collections of RPM package stored locally or on remote servers.
'/etc/yum.repos.d' = repository configuration files located
If default repositories do not cover requirements or if latest version needed, then additional
repositories can be configured by following software's documentation.

To list available repositories, 
> yum repolist
To list configuration files that define these repositories
> ls /etc/yum.repos.d/
(Opening any of these files will show a URL pointing to repository location, where you can view RPM files available for download)

Listing installed or available pakcages
let for Ansible
> yum list ansible
Removing an installed package
> yum remove ansible

Listing all available package versions
use the '--showduplicates' option to list all available versions
> yum --showduplicates list ansible


Services
................
Linux services = background processes essential for running software such as webservers, database servers and devops tools.
Ensure critical application continue running after a server restart, start in correct order when multiple services are present, and manage dependency effectively.

software packages that runs in background after installation , are automatically set as a service.
ex: installing apache web server create an HTTPD service.

start HTTPD service with legacy command:
> service httpd start

but we prefer systemctl command:
> systemctl start httpd
> systemctl stop httpd
> systemctl status httpd
> systemctl enable httpd
> systemctl disable httpd

⏺ Configuring a Custom Application as a Service
Let a simple Pytthon-based web server located at '/opt/code/my_app.py'
When executed with Python interpreter , it starts a web server listening on port 5000.

Run command
> /usr/bin/python3 /opt/code/my_app.py
Verify the server is working using
> curl http://localhost:5000
(returns hello world)

By configuring your Python application as  a service, you abstract the need to maually
handle the command line and file paths each time.
Start and stop service with
> systemctl start my_app
> systemctl stop my_app
This approcah simplifies service management and minimizes manual intervention.

⏺ Creating a systemd Unit File
To ensure application starts automatically on boot or restarts if it crashes
These files stored in '/etc/systemd/system'
> vi my_app.service
[Unit]                                      # Provides metadata and a short description of the service
Description=My Python Web Application

[Service]                                   # contains the command to start your application ('ExecStart')
ExecStart=/usr/bin/python3 /opt/code/my_app.py
ExecStartPre=/opt/code/configure_db.sh     #('ExecStartPre') or ('ExecStartPost') optional command that run before or after starting service       
ExecStartPost=/opt/code/email_status.sh
Restart=always          # restart policy

[Install]               # configures the service to begin when the system reaches multi-user target during boot sequence
WantedBy=multi-user.target

Reload systemd to register your new service
> systemctl daemon-reload
Start the service
> systemctl start my_app
> systemctl status my_app
Test service again
> curl http://localhost:5000

Example: The Docker Service
consider docker daemon
After installing Docker, an executable named 'docker' is available at '/usr/bin/docker' and it is configured
as a service using a unit file typically located at '/lib/systemd/system/dockr.service'

After installation, docker daemon automatically runs in background and listens for Docker commands.
This configuration serves as a model for setting up amy custom application as a service.


****************************
****************************
NETWORKING BASICS
****************************
****************************
https://notes.kodekloud.com/docs/DevOps-Pre-Requisite-Course/Networking-Basics/A-Quick-Reminder









